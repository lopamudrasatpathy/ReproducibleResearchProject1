rm(list=ls())
ls
ls()
q()
happy <- c("Happy","Home")
happy
rm(list = ls())
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
rm(list=ls())
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sx(A)
sxA
sA
summary[InsectSprays,2]
summary(InsectSprays,2)
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(InsectSprays(class))
sapply(InsectSprays,FUN = class())
sapply(InsectSprays,FUN = class(A))
skip
sapply(InsectSprays,class)
fit <- lm(formula = y ~ x, data = InsectSprays)
fit <- lm(formula = spray ~ count, data = InsectSprays)
fit <- lm(count~spray, InsectSprays)
x$coef
summary(fit)$coef
est(fit[,1])
skip
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1)
nfit <- lm(count~spray-1, InsectSprays)
summary(nfit)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[2]-fit$coef[3]
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(X ~ Year,hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)
summary(fit)$coef
lmF <- lm(hunger$Numeric ~hunger$Sex[hunger$Sex == "Female"])
skip
lmf <- lm(Numeric[hunger$Sex== "Female"] ~ Year[sex == "Female"], hunger)
lmf <- lm(Numeric[hunger$Sex== "Female"] ~ Year[Sex == "Female"], hunger)
lmf <- lm(hunger$Numeric[hunger$Sex == "Female"] ~ hunger$Year[hunger$Sex == "Female"])
lmF <- lm(hunger$Numeric[hunger$Sex == "Female"] ~ hunger$Year[hunger$Sex == "Female"])
lmF
lmM <- lm(hunger$Numeric[hunger$Sex == "Male"] ~ hunger$Year[hunger$Sex == "Male"])
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which = 1)
fitno <- lm(y ~ x, out2[-1,])
fitno$residuals
plot(fitno, which = 1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"]- predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- resid(fit)/deviance(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/sigma*sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstad,rstandard(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit, which =3)
plot(fit, which = 2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fitno,out2) - predict(fit,out2) <- dy
dy <- predict(fitno,out2)-predict(fit, out2)
(dy^2/2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
rm(list = ls())
rm(list = ls())
rm(list = ls())
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
find.package("devtools")
find.package("devtools")
library(devtools)
find_rtools()
install.packages("Rtools")
library(Rtools)
install.packages("data.table")
find.package("devtools")
x <- seq(-10,10,length = 1000)
manipulate(
plot(x, exp(beta0 + beta1 *x)/(1+exp(beta0 + beta1 *x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2,2, step = .1,initial = 2),
beta0 = slider(-2,2, step = .1, initial = 0)
)
?manipulate
install.packages("manipulate")
library(manipulate)
x <- seq(-10,10,length = 1000)
manipulate(
plot(x, exp(beta0 + beta1 *x)/(1+exp(beta0 + beta1 *x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2,2, step = .1,initial = 2),
beta0 = slider(-2,2, step = .1, initial = 0)
)
x <- seq(-10,10,length = 1000)
manipulate(
plot(x, exp(beta0 + beta1 *x)/(1+exp(beta0 + beta1 *x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2,2, step = .1,initial = 2),
beta0 = slider(-2,2, step = .1, initial = 0)
)
install.packages("swirl")
install.packages("swirl")
install_from_swirl("Regression Models")
rm(list = ls())
install.packages("swirl")
install.packages(c("data.table", "quantreg"))
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl2)
x1c()
skip
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant Mortality, data = swiss)
skip
fit1 <- lm( Fertility ~ Agriculture , swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
deviance(fit1) - deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = binomial(link = "logit"),data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000,50))
nxt()
view(hits)
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl,'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm( formula = visits ~ date,, family = poisson, offset = log(visits+1), data = hits)
mdl2 <- glm( formula = Simplystats ~ date,, family = poisson, offset = log(visits+1), data = hits)
mdl2 <- glm( formula = simplystats ~ date,, family = poisson, offset = log(visits+1), data = hits)
qpois(.95, mdl2$fitted.values[704])
setwd("C:/Users/Owner/Desktop/coursera/Reproducible reserach/ActivityData")
rm(list = ls())
setwd("C:/Users/Owner/Desktop/coursera/Reproducible reserach/ActivityData")
#Loading and preprocessing the data
if(!file.exists("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
unzip(temp)
unlink(temp)
}
activitydata <- read.csv("./activity.csv", sep = ",")
names(activitydata)
str(activitydata)
head(activitydata)
#Convert date from factor to date
#lubridate package
install.packages("lubridate")
library(lubridate)
activitydata$date <- as.Date(activitydata$date)
#Part 1
##What is mean total number of steps taken per day?
#Using reshape2 package
#Histogram
install.packages("reshape2")
library(reshape2)
actMeltDat <- melt(activitydata, id= "date",measure.vars = "steps", na.rm = TRUE)
actCastDat <-dcast(actMeltDat,date ~ variable,sum)
# Plot histogram with frequency of steps by day and add a red line showing the mean value
plot(actCastDat$date, actCastDat$steps, type="h", main="Histogram of Daily Steps", xlab="Date",
ylab="Steps per Day", col="blue", lwd= 8)
abline(h=mean(actCastDat$steps, na.rm=TRUE), col="red", lwd=2)
Mean <- mean(actCastDat$steps, na.rm = TRUE)
Median <- median(actCastDat$steps, na.rm = TRUE)
#Part2
##What is the average daily activity pattern?
#Average dailyy pattern by interval
actMeltInt <- melt(activitydata, id="interval", measure.vars = "steps", na.rm = TRUE)
actCastInt <- dcast(actMeltInt, interval ~ variable, sum)
#Time series plot of the average number of steps taken (Average frequency of steps by interval )
plot(actCastInt$interval, actCastInt$steps, type="l",main = "Frequeny of steps per interval",
xlab = "Interval", ylab = "Steps", col= "purple", lwd = 3 )
abline(h = mean(actCastInt$steps, na.rm = TRUE),col = "blue", lwd = 2)
maxInterval <- actCastInt[which.max(actCastInt$steps),1]
#Part3
##Strategy for imputing missing values
#Calculate totall number of missing values
sum(is.na(activitydata$steps))
stepsPerInt <- actCastInt
actwoNA <- activitydata
actMerge <- merge(stepsPerInt,actwoNA,by = "interval", suffixes = c(".act", ".spi"))
NAIndex <- which(is.na(actwoNA$steps))
actwoNA[NAIndex,"steps"] = actMerge[NAIndex,"steps.spi"]
NAIndex <- which(is.na(actwoNA$steps))
NAIndex
actwoNA[NAIndex,"steps"] = actMerge[NAIndex,"steps.spi"]
actwoNA
View(activitydata)
na_fill <- function(activitydata, pervalue) {
na_index <- which(is.na(activitydata$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = activitydata[idx,]$interval
pervalue[pervalue$interval == interval,]$steps
}))
fill_steps <- activitydata$steps
fill_steps[na_index] <- na_replace
fill_steps
}
activitydata_fill <- data.frame(
steps = na_fill(activitydata, actCastInt),
date = activitydata$date,
interval = activitydata$interval)
str(activitydata_fill)
sum(is.na(activitydata_fill$steps))
totalSteps <- aggregate(steps ~ date, activitydata_fill,sum)
colnames(totalSteps) <- c("date", "steps")
library("ggplot2", lib.loc="~/R/win-library/3.4")
ggplot(totalSteps, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)")
install.packages("ggplot2")
library(ggplot2)
ggplot(totalSteps, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)")
?ggplot2
install.packages(c("devtools", "openssl", "rmarkdown"))
ggplot(totalSteps, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day", y = "Number of times in a day(Count)")
